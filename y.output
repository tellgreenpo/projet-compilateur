Non-terminaux inutiles dans la grammaire

    args
    expr
    names
    divMul


Terminaux inutilisés dans la grammaire

    EOL
    DOT
    OPEN_BRACKET
    CLOSE_BRACKET
    PLUS
    MINUS
    MULTIPLY
    DIVIDE


Règles inutiles dans la grammaire

   45 args: value COMMA args
   46     | value
   47     | %empty

   48 expr: expr EQUAL expr
   49     | expr PLUS expr
   50     | expr MINUS expr
   51     | expr MULTIPLY expr
   52     | expr DIVIDE expr
   53     | name
   54     | value

   55 names: name COMMA names
   56      | name


Grammaire

    0 $accept: main_structure $end

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT body

    2 body: OPEN_BRACE declarations insts CLOSE_BRACE

    3 insts: inst insts
    4      | %empty

    5 inst: affectation
    6     | print
    7     | ifBlock
    8     | whileBlock
    9     | RETURN value SEMICOLON
   10     | RETURN name SEMICOLON

   11 params: type name COMMA params
   12       | type name
   13       | %empty

   14 declaration: type ids SEMICOLON
   15            | type id EQUAL value SEMICOLON

   16 declarations: declaration declarations
   17             | declaration

   18 affectation: name EQUAL value SEMICOLON

   19 print: PRINTF OPEN_PARENT value CLOSE_PARENT SEMICOLON
   20      | PRINTF OPEN_PARENT name CLOSE_PARENT SEMICOLON

   21 ifBlock: IF OPEN_PARENT condition CLOSE_PARENT body
   22        | ELSE IF OPEN_PARENT condition CLOSE_PARENT body
   23        | ELSE body

   24 whileBlock: WHILE OPEN_PARENT condition CLOSE_PARENT body

   25 condition: valueOrVar
   26          | unaryOperand valueOrVar
   27          | valueOrVar binaryOperand valueOrVar

   28 binaryOperand: LESS
   29              | LESS_EQ
   30              | MORE
   31              | MORE_EQ
   32              | EQUALITY
   33              | DIFF

   34 unaryOperand: EXCLAM

   35 value: NUMBER
   36      | EXPON

   37 type: INT
   38     | CONST INT

   39 name: ALPHA

   40 valueOrVar: value
   41           | name

   42 id: ALPHA

   43 ids: id COMMA ids
   44    | id


Terminaux, suivis des règles où ils apparaissent

    $end (0) 0
    error (256)
    MAIN (258) 1
    RETURN (259) 9 10
    PRINTF (260) 19 20
    CONST (261) 38
    EOL (262)
    DOT (263)
    COMMA (264) 11 43
    SEMICOLON (265) 9 10 14 15 18 19 20
    OPEN_BRACE (266) 2
    CLOSE_BRACE (267) 2
    OPEN_BRACKET (268)
    CLOSE_BRACKET (269)
    OPEN_PARENT (270) 1 19 20 21 22 24
    CLOSE_PARENT (271) 1 19 20 21 22 24
    IF (272) 21 22
    ELSE (273) 22 23
    WHILE (274) 24
    EXCLAM (275) 34
    EQUALITY (276) 32
    DIFF (277) 33
    LESS (278) 28
    MORE (279) 30
    LESS_EQ (280) 29
    MORE_EQ (281) 31
    NUMBER <nb> (282) 35
    EXPON <nb> (283) 36
    ALPHA <str> (284) 39 42
    INT <str> (285) 37 38
    EQUAL (286) 15 18
    PLUS (287)
    MINUS (288)
    MULTIPLY (289)
    DIVIDE (290)


Non-terminaux, suivis des règles où ils apparaissent

    $accept (36)
        à gauche: 0
    main_structure (37)
        à gauche: 1
        à droite: 0
    body (38)
        à gauche: 2
        à droite: 1 21 22 23 24
    insts (39)
        à gauche: 3 4
        à droite: 2 3
    inst (40)
        à gauche: 5 6 7 8 9 10
        à droite: 3
    params (41)
        à gauche: 11 12 13
        à droite: 1 11
    declaration (42)
        à gauche: 14 15
        à droite: 16 17
    declarations (43)
        à gauche: 16 17
        à droite: 2 16
    affectation (44)
        à gauche: 18
        à droite: 5
    print (45)
        à gauche: 19 20
        à droite: 6
    ifBlock (46)
        à gauche: 21 22 23
        à droite: 7
    whileBlock (47)
        à gauche: 24
        à droite: 8
    condition (48)
        à gauche: 25 26 27
        à droite: 21 22 24
    binaryOperand (49)
        à gauche: 28 29 30 31 32 33
        à droite: 27
    unaryOperand (50)
        à gauche: 34
        à droite: 26
    value <nb> (51)
        à gauche: 35 36
        à droite: 9 15 18 19 40
    type <nb> (52)
        à gauche: 37 38
        à droite: 1 11 12 14 15
    name <str> (53)
        à gauche: 39
        à droite: 10 11 12 18 20 41
    valueOrVar (54)
        à gauche: 40 41
        à droite: 25 26 27
    id <str> (55)
        à gauche: 42
        à droite: 15 43 44
    ids (56)
        à gauche: 43 44
        à droite: 14 43


État 0

    0 $accept: . main_structure $end

    CONST  décalage et aller à l'état 1
    INT    décalage et aller à l'état 2

    main_structure  aller à l'état 3
    type            aller à l'état 4


État 1

   38 type: CONST . INT

    INT  décalage et aller à l'état 5


État 2

   37 type: INT .

    $défaut  réduction par utilisation de la règle 37 (type)


État 3

    0 $accept: main_structure . $end

    $end  décalage et aller à l'état 6


État 4

    1 main_structure: type . MAIN OPEN_PARENT params CLOSE_PARENT body

    MAIN  décalage et aller à l'état 7


État 5

   38 type: CONST INT .

    $défaut  réduction par utilisation de la règle 38 (type)


État 6

    0 $accept: main_structure $end .

    $défaut  accepter


État 7

    1 main_structure: type MAIN . OPEN_PARENT params CLOSE_PARENT body

    OPEN_PARENT  décalage et aller à l'état 8


État 8

    1 main_structure: type MAIN OPEN_PARENT . params CLOSE_PARENT body

    CONST  décalage et aller à l'état 1
    INT    décalage et aller à l'état 2

    $défaut  réduction par utilisation de la règle 13 (params)

    params  aller à l'état 9
    type    aller à l'état 10


État 9

    1 main_structure: type MAIN OPEN_PARENT params . CLOSE_PARENT body

    CLOSE_PARENT  décalage et aller à l'état 11


État 10

   11 params: type . name COMMA params
   12       | type . name

    ALPHA  décalage et aller à l'état 12

    name  aller à l'état 13


État 11

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT . body

    OPEN_BRACE  décalage et aller à l'état 14

    body  aller à l'état 15


État 12

   39 name: ALPHA .

    $défaut  réduction par utilisation de la règle 39 (name)


État 13

   11 params: type name . COMMA params
   12       | type name .

    COMMA  décalage et aller à l'état 16

    $défaut  réduction par utilisation de la règle 12 (params)


État 14

    2 body: OPEN_BRACE . declarations insts CLOSE_BRACE

    CONST  décalage et aller à l'état 1
    INT    décalage et aller à l'état 2

    declaration   aller à l'état 17
    declarations  aller à l'état 18
    type          aller à l'état 19


État 15

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT body .

    $défaut  réduction par utilisation de la règle 1 (main_structure)


État 16

   11 params: type name COMMA . params

    CONST  décalage et aller à l'état 1
    INT    décalage et aller à l'état 2

    $défaut  réduction par utilisation de la règle 13 (params)

    params  aller à l'état 20
    type    aller à l'état 10


État 17

   16 declarations: declaration . declarations
   17             | declaration .

    CONST  décalage et aller à l'état 1
    INT    décalage et aller à l'état 2

    $défaut  réduction par utilisation de la règle 17 (declarations)

    declaration   aller à l'état 17
    declarations  aller à l'état 21
    type          aller à l'état 19


État 18

    2 body: OPEN_BRACE declarations . insts CLOSE_BRACE

    RETURN  décalage et aller à l'état 22
    PRINTF  décalage et aller à l'état 23
    IF      décalage et aller à l'état 24
    ELSE    décalage et aller à l'état 25
    WHILE   décalage et aller à l'état 26
    ALPHA   décalage et aller à l'état 12

    $défaut  réduction par utilisation de la règle 4 (insts)

    insts        aller à l'état 27
    inst         aller à l'état 28
    affectation  aller à l'état 29
    print        aller à l'état 30
    ifBlock      aller à l'état 31
    whileBlock   aller à l'état 32
    name         aller à l'état 33


État 19

   14 declaration: type . ids SEMICOLON
   15            | type . id EQUAL value SEMICOLON

    ALPHA  décalage et aller à l'état 34

    id   aller à l'état 35
    ids  aller à l'état 36


État 20

   11 params: type name COMMA params .

    $défaut  réduction par utilisation de la règle 11 (params)


État 21

   16 declarations: declaration declarations .

    $défaut  réduction par utilisation de la règle 16 (declarations)


État 22

    9 inst: RETURN . value SEMICOLON
   10     | RETURN . name SEMICOLON

    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38
    ALPHA   décalage et aller à l'état 12

    value  aller à l'état 39
    name   aller à l'état 40


État 23

   19 print: PRINTF . OPEN_PARENT value CLOSE_PARENT SEMICOLON
   20      | PRINTF . OPEN_PARENT name CLOSE_PARENT SEMICOLON

    OPEN_PARENT  décalage et aller à l'état 41


État 24

   21 ifBlock: IF . OPEN_PARENT condition CLOSE_PARENT body

    OPEN_PARENT  décalage et aller à l'état 42


État 25

   22 ifBlock: ELSE . IF OPEN_PARENT condition CLOSE_PARENT body
   23        | ELSE . body

    OPEN_BRACE  décalage et aller à l'état 14
    IF          décalage et aller à l'état 43

    body  aller à l'état 44


État 26

   24 whileBlock: WHILE . OPEN_PARENT condition CLOSE_PARENT body

    OPEN_PARENT  décalage et aller à l'état 45


État 27

    2 body: OPEN_BRACE declarations insts . CLOSE_BRACE

    CLOSE_BRACE  décalage et aller à l'état 46


État 28

    3 insts: inst . insts

    RETURN  décalage et aller à l'état 22
    PRINTF  décalage et aller à l'état 23
    IF      décalage et aller à l'état 24
    ELSE    décalage et aller à l'état 25
    WHILE   décalage et aller à l'état 26
    ALPHA   décalage et aller à l'état 12

    $défaut  réduction par utilisation de la règle 4 (insts)

    insts        aller à l'état 47
    inst         aller à l'état 28
    affectation  aller à l'état 29
    print        aller à l'état 30
    ifBlock      aller à l'état 31
    whileBlock   aller à l'état 32
    name         aller à l'état 33


État 29

    5 inst: affectation .

    $défaut  réduction par utilisation de la règle 5 (inst)


État 30

    6 inst: print .

    $défaut  réduction par utilisation de la règle 6 (inst)


État 31

    7 inst: ifBlock .

    $défaut  réduction par utilisation de la règle 7 (inst)


État 32

    8 inst: whileBlock .

    $défaut  réduction par utilisation de la règle 8 (inst)


État 33

   18 affectation: name . EQUAL value SEMICOLON

    EQUAL  décalage et aller à l'état 48


État 34

   42 id: ALPHA .

    $défaut  réduction par utilisation de la règle 42 (id)


État 35

   15 declaration: type id . EQUAL value SEMICOLON
   43 ids: id . COMMA ids
   44    | id .

    COMMA  décalage et aller à l'état 49
    EQUAL  décalage et aller à l'état 50

    $défaut  réduction par utilisation de la règle 44 (ids)


État 36

   14 declaration: type ids . SEMICOLON

    SEMICOLON  décalage et aller à l'état 51


État 37

   35 value: NUMBER .

    $défaut  réduction par utilisation de la règle 35 (value)


État 38

   36 value: EXPON .

    $défaut  réduction par utilisation de la règle 36 (value)


État 39

    9 inst: RETURN value . SEMICOLON

    SEMICOLON  décalage et aller à l'état 52


État 40

   10 inst: RETURN name . SEMICOLON

    SEMICOLON  décalage et aller à l'état 53


État 41

   19 print: PRINTF OPEN_PARENT . value CLOSE_PARENT SEMICOLON
   20      | PRINTF OPEN_PARENT . name CLOSE_PARENT SEMICOLON

    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38
    ALPHA   décalage et aller à l'état 12

    value  aller à l'état 54
    name   aller à l'état 55


État 42

   21 ifBlock: IF OPEN_PARENT . condition CLOSE_PARENT body

    EXCLAM  décalage et aller à l'état 56
    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38
    ALPHA   décalage et aller à l'état 12

    condition     aller à l'état 57
    unaryOperand  aller à l'état 58
    value         aller à l'état 59
    name          aller à l'état 60
    valueOrVar    aller à l'état 61


État 43

   22 ifBlock: ELSE IF . OPEN_PARENT condition CLOSE_PARENT body

    OPEN_PARENT  décalage et aller à l'état 62


État 44

   23 ifBlock: ELSE body .

    $défaut  réduction par utilisation de la règle 23 (ifBlock)


État 45

   24 whileBlock: WHILE OPEN_PARENT . condition CLOSE_PARENT body

    EXCLAM  décalage et aller à l'état 56
    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38
    ALPHA   décalage et aller à l'état 12

    condition     aller à l'état 63
    unaryOperand  aller à l'état 58
    value         aller à l'état 59
    name          aller à l'état 60
    valueOrVar    aller à l'état 61


État 46

    2 body: OPEN_BRACE declarations insts CLOSE_BRACE .

    $défaut  réduction par utilisation de la règle 2 (body)


État 47

    3 insts: inst insts .

    $défaut  réduction par utilisation de la règle 3 (insts)


État 48

   18 affectation: name EQUAL . value SEMICOLON

    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38

    value  aller à l'état 64


État 49

   43 ids: id COMMA . ids

    ALPHA  décalage et aller à l'état 34

    id   aller à l'état 65
    ids  aller à l'état 66


État 50

   15 declaration: type id EQUAL . value SEMICOLON

    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38

    value  aller à l'état 67


État 51

   14 declaration: type ids SEMICOLON .

    $défaut  réduction par utilisation de la règle 14 (declaration)


État 52

    9 inst: RETURN value SEMICOLON .

    $défaut  réduction par utilisation de la règle 9 (inst)


État 53

   10 inst: RETURN name SEMICOLON .

    $défaut  réduction par utilisation de la règle 10 (inst)


État 54

   19 print: PRINTF OPEN_PARENT value . CLOSE_PARENT SEMICOLON

    CLOSE_PARENT  décalage et aller à l'état 68


État 55

   20 print: PRINTF OPEN_PARENT name . CLOSE_PARENT SEMICOLON

    CLOSE_PARENT  décalage et aller à l'état 69


État 56

   34 unaryOperand: EXCLAM .

    $défaut  réduction par utilisation de la règle 34 (unaryOperand)


État 57

   21 ifBlock: IF OPEN_PARENT condition . CLOSE_PARENT body

    CLOSE_PARENT  décalage et aller à l'état 70


État 58

   26 condition: unaryOperand . valueOrVar

    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38
    ALPHA   décalage et aller à l'état 12

    value       aller à l'état 59
    name        aller à l'état 60
    valueOrVar  aller à l'état 71


État 59

   40 valueOrVar: value .

    $défaut  réduction par utilisation de la règle 40 (valueOrVar)


État 60

   41 valueOrVar: name .

    $défaut  réduction par utilisation de la règle 41 (valueOrVar)


État 61

   25 condition: valueOrVar .
   27          | valueOrVar . binaryOperand valueOrVar

    EQUALITY  décalage et aller à l'état 72
    DIFF      décalage et aller à l'état 73
    LESS      décalage et aller à l'état 74
    MORE      décalage et aller à l'état 75
    LESS_EQ   décalage et aller à l'état 76
    MORE_EQ   décalage et aller à l'état 77

    $défaut  réduction par utilisation de la règle 25 (condition)

    binaryOperand  aller à l'état 78


État 62

   22 ifBlock: ELSE IF OPEN_PARENT . condition CLOSE_PARENT body

    EXCLAM  décalage et aller à l'état 56
    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38
    ALPHA   décalage et aller à l'état 12

    condition     aller à l'état 79
    unaryOperand  aller à l'état 58
    value         aller à l'état 59
    name          aller à l'état 60
    valueOrVar    aller à l'état 61


État 63

   24 whileBlock: WHILE OPEN_PARENT condition . CLOSE_PARENT body

    CLOSE_PARENT  décalage et aller à l'état 80


État 64

   18 affectation: name EQUAL value . SEMICOLON

    SEMICOLON  décalage et aller à l'état 81


État 65

   43 ids: id . COMMA ids
   44    | id .

    COMMA  décalage et aller à l'état 49

    $défaut  réduction par utilisation de la règle 44 (ids)


État 66

   43 ids: id COMMA ids .

    $défaut  réduction par utilisation de la règle 43 (ids)


État 67

   15 declaration: type id EQUAL value . SEMICOLON

    SEMICOLON  décalage et aller à l'état 82


État 68

   19 print: PRINTF OPEN_PARENT value CLOSE_PARENT . SEMICOLON

    SEMICOLON  décalage et aller à l'état 83


État 69

   20 print: PRINTF OPEN_PARENT name CLOSE_PARENT . SEMICOLON

    SEMICOLON  décalage et aller à l'état 84


État 70

   21 ifBlock: IF OPEN_PARENT condition CLOSE_PARENT . body

    OPEN_BRACE  décalage et aller à l'état 14

    body  aller à l'état 85


État 71

   26 condition: unaryOperand valueOrVar .

    $défaut  réduction par utilisation de la règle 26 (condition)


État 72

   32 binaryOperand: EQUALITY .

    $défaut  réduction par utilisation de la règle 32 (binaryOperand)


État 73

   33 binaryOperand: DIFF .

    $défaut  réduction par utilisation de la règle 33 (binaryOperand)


État 74

   28 binaryOperand: LESS .

    $défaut  réduction par utilisation de la règle 28 (binaryOperand)


État 75

   30 binaryOperand: MORE .

    $défaut  réduction par utilisation de la règle 30 (binaryOperand)


État 76

   29 binaryOperand: LESS_EQ .

    $défaut  réduction par utilisation de la règle 29 (binaryOperand)


État 77

   31 binaryOperand: MORE_EQ .

    $défaut  réduction par utilisation de la règle 31 (binaryOperand)


État 78

   27 condition: valueOrVar binaryOperand . valueOrVar

    NUMBER  décalage et aller à l'état 37
    EXPON   décalage et aller à l'état 38
    ALPHA   décalage et aller à l'état 12

    value       aller à l'état 59
    name        aller à l'état 60
    valueOrVar  aller à l'état 86


État 79

   22 ifBlock: ELSE IF OPEN_PARENT condition . CLOSE_PARENT body

    CLOSE_PARENT  décalage et aller à l'état 87


État 80

   24 whileBlock: WHILE OPEN_PARENT condition CLOSE_PARENT . body

    OPEN_BRACE  décalage et aller à l'état 14

    body  aller à l'état 88


État 81

   18 affectation: name EQUAL value SEMICOLON .

    $défaut  réduction par utilisation de la règle 18 (affectation)


État 82

   15 declaration: type id EQUAL value SEMICOLON .

    $défaut  réduction par utilisation de la règle 15 (declaration)


État 83

   19 print: PRINTF OPEN_PARENT value CLOSE_PARENT SEMICOLON .

    $défaut  réduction par utilisation de la règle 19 (print)


État 84

   20 print: PRINTF OPEN_PARENT name CLOSE_PARENT SEMICOLON .

    $défaut  réduction par utilisation de la règle 20 (print)


État 85

   21 ifBlock: IF OPEN_PARENT condition CLOSE_PARENT body .

    $défaut  réduction par utilisation de la règle 21 (ifBlock)


État 86

   27 condition: valueOrVar binaryOperand valueOrVar .

    $défaut  réduction par utilisation de la règle 27 (condition)


État 87

   22 ifBlock: ELSE IF OPEN_PARENT condition CLOSE_PARENT . body

    OPEN_BRACE  décalage et aller à l'état 14

    body  aller à l'état 89


État 88

   24 whileBlock: WHILE OPEN_PARENT condition CLOSE_PARENT body .

    $défaut  réduction par utilisation de la règle 24 (whileBlock)


État 89

   22 ifBlock: ELSE IF OPEN_PARENT condition CLOSE_PARENT body .

    $défaut  réduction par utilisation de la règle 22 (ifBlock)

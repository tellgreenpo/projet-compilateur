Non-terminaux inutiles dans la grammaire

    args


Terminaux inutilisés dans la grammaire

    EOL
    DOT
    OPEN_BRACKET
    CLOSE_BRACKET


Règles inutiles dans la grammaire

   35 args: value COMMA args
   36     | value
   37     | %empty


État 12 conflits: 1 décalage/réduction
État 22 conflits: 1 décalage/réduction
État 49 conflits: 1 décalage/réduction
État 65 conflits: 4 décalage/réduction


Grammaire

    0 $accept: main_structure $end

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT body

    2 body: OPEN_BRACE insts CLOSE_BRACE

    3 insts: inst insts
    4      | %empty

    5 inst: declaration
    6     | affectation
    7     | print
    8     | RETURN value SEMICOLON
    9     | RETURN name SEMICOLON

   10 params: type name COMMA params
   11       | type name
   12       | %empty

   13 declaration: type names SEMICOLON
   14            | CONST type names SEMICOLON

   15 affectation: type name EQUAL value SEMICOLON
   16            | name EQUAL value SEMICOLON
   17            | name EQUAL operation SEMICOLON

   18 print: PRINTF OPEN_PARENT value CLOSE_PARENT SEMICOLON
   19      | PRINTF OPEN_PARENT name CLOSE_PARENT SEMICOLON

   20 signs: PLUS
   21      | MINUS
   22      | MULTIPLY
   23      | DIVIDE

   24 operation: operation signs operation
   25          | value

   26 value: NUMBER

   27 type: INT
   28     | %empty

   29 name: ALPHA end_name

   30 end_name: ALPHA
   31         | NUMBER
   32         | %empty

   33 names: name COMMA names
   34      | name


Terminaux, suivis des règles où ils apparaissent

    $end (0) 0
    error (256)
    PLUS (258) 20
    MINUS (259) 21
    MULTIPLY (260) 22
    DIVIDE (261) 23
    EQUAL (262) 15 16 17
    NUMBER (263) 26 31
    ALPHA (264) 29 30
    INT (265) 27
    CONST (266) 14
    EOL (267)
    DOT (268)
    COMMA (269) 10 33
    SEMICOLON (270) 8 9 13 14 15 16 17 18 19
    OPEN_BRACE (271) 2
    CLOSE_BRACE (272) 2
    OPEN_BRACKET (273)
    CLOSE_BRACKET (274)
    OPEN_PARENT (275) 1 18 19
    CLOSE_PARENT (276) 1 18 19
    MAIN (277) 1
    RETURN (278) 8 9
    PRINTF (279) 18 19


Non-terminaux, suivis des règles où ils apparaissent

    $accept (25)
        à gauche: 0
    main_structure (26)
        à gauche: 1
        à droite: 0
    body (27)
        à gauche: 2
        à droite: 1
    insts (28)
        à gauche: 3 4
        à droite: 2 3
    inst (29)
        à gauche: 5 6 7 8 9
        à droite: 3
    params (30)
        à gauche: 10 11 12
        à droite: 1 10
    declaration (31)
        à gauche: 13 14
        à droite: 5
    affectation (32)
        à gauche: 15 16 17
        à droite: 6
    print (33)
        à gauche: 18 19
        à droite: 7
    signs (34)
        à gauche: 20 21 22 23
        à droite: 24
    operation (35)
        à gauche: 24 25
        à droite: 17 24
    value (36)
        à gauche: 26
        à droite: 8 15 16 18 25
    type (37)
        à gauche: 27 28
        à droite: 1 10 11 13 14 15
    name (38)
        à gauche: 29
        à droite: 9 10 11 15 16 17 19 33 34
    end_name (39)
        à gauche: 30 31 32
        à droite: 29
    names (40)
        à gauche: 33 34
        à droite: 13 14 33


État 0

    0 $accept: . main_structure $end

    INT  décalage et aller à l'état 1

    $défaut  réduction par utilisation de la règle 28 (type)

    main_structure  aller à l'état 2
    type            aller à l'état 3


État 1

   27 type: INT .

    $défaut  réduction par utilisation de la règle 27 (type)


État 2

    0 $accept: main_structure . $end

    $end  décalage et aller à l'état 4


État 3

    1 main_structure: type . MAIN OPEN_PARENT params CLOSE_PARENT body

    MAIN  décalage et aller à l'état 5


État 4

    0 $accept: main_structure $end .

    $défaut  accepter


État 5

    1 main_structure: type MAIN . OPEN_PARENT params CLOSE_PARENT body

    OPEN_PARENT  décalage et aller à l'état 6


État 6

    1 main_structure: type MAIN OPEN_PARENT . params CLOSE_PARENT body

    INT  décalage et aller à l'état 1

    ALPHA     réduction par utilisation de la règle 28 (type)
    $défaut  réduction par utilisation de la règle 12 (params)

    params  aller à l'état 7
    type    aller à l'état 8


État 7

    1 main_structure: type MAIN OPEN_PARENT params . CLOSE_PARENT body

    CLOSE_PARENT  décalage et aller à l'état 9


État 8

   10 params: type . name COMMA params
   11       | type . name

    ALPHA  décalage et aller à l'état 10

    name  aller à l'état 11


État 9

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT . body

    OPEN_BRACE  décalage et aller à l'état 12

    body  aller à l'état 13


État 10

   29 name: ALPHA . end_name

    NUMBER  décalage et aller à l'état 14
    ALPHA   décalage et aller à l'état 15

    $défaut  réduction par utilisation de la règle 32 (end_name)

    end_name  aller à l'état 16


État 11

   10 params: type name . COMMA params
   11       | type name .

    COMMA  décalage et aller à l'état 17

    $défaut  réduction par utilisation de la règle 11 (params)


État 12

    2 body: OPEN_BRACE . insts CLOSE_BRACE

    ALPHA   décalage et aller à l'état 10
    INT     décalage et aller à l'état 1
    CONST   décalage et aller à l'état 18
    RETURN  décalage et aller à l'état 19
    PRINTF  décalage et aller à l'état 20

    ALPHA     [réduction par utilisation de la règle 28 (type)]
    $défaut  réduction par utilisation de la règle 4 (insts)

    insts        aller à l'état 21
    inst         aller à l'état 22
    declaration  aller à l'état 23
    affectation  aller à l'état 24
    print        aller à l'état 25
    type         aller à l'état 26
    name         aller à l'état 27


État 13

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT body .

    $défaut  réduction par utilisation de la règle 1 (main_structure)


État 14

   31 end_name: NUMBER .

    $défaut  réduction par utilisation de la règle 31 (end_name)


État 15

   30 end_name: ALPHA .

    $défaut  réduction par utilisation de la règle 30 (end_name)


État 16

   29 name: ALPHA end_name .

    $défaut  réduction par utilisation de la règle 29 (name)


État 17

   10 params: type name COMMA . params

    INT  décalage et aller à l'état 1

    ALPHA     réduction par utilisation de la règle 28 (type)
    $défaut  réduction par utilisation de la règle 12 (params)

    params  aller à l'état 28
    type    aller à l'état 8


État 18

   14 declaration: CONST . type names SEMICOLON

    INT  décalage et aller à l'état 1

    $défaut  réduction par utilisation de la règle 28 (type)

    type  aller à l'état 29


État 19

    8 inst: RETURN . value SEMICOLON
    9     | RETURN . name SEMICOLON

    NUMBER  décalage et aller à l'état 30
    ALPHA   décalage et aller à l'état 10

    value  aller à l'état 31
    name   aller à l'état 32


État 20

   18 print: PRINTF . OPEN_PARENT value CLOSE_PARENT SEMICOLON
   19      | PRINTF . OPEN_PARENT name CLOSE_PARENT SEMICOLON

    OPEN_PARENT  décalage et aller à l'état 33


État 21

    2 body: OPEN_BRACE insts . CLOSE_BRACE

    CLOSE_BRACE  décalage et aller à l'état 34


État 22

    3 insts: inst . insts

    ALPHA   décalage et aller à l'état 10
    INT     décalage et aller à l'état 1
    CONST   décalage et aller à l'état 18
    RETURN  décalage et aller à l'état 19
    PRINTF  décalage et aller à l'état 20

    ALPHA     [réduction par utilisation de la règle 28 (type)]
    $défaut  réduction par utilisation de la règle 4 (insts)

    insts        aller à l'état 35
    inst         aller à l'état 22
    declaration  aller à l'état 23
    affectation  aller à l'état 24
    print        aller à l'état 25
    type         aller à l'état 26
    name         aller à l'état 27


État 23

    5 inst: declaration .

    $défaut  réduction par utilisation de la règle 5 (inst)


État 24

    6 inst: affectation .

    $défaut  réduction par utilisation de la règle 6 (inst)


État 25

    7 inst: print .

    $défaut  réduction par utilisation de la règle 7 (inst)


État 26

   13 declaration: type . names SEMICOLON
   15 affectation: type . name EQUAL value SEMICOLON

    ALPHA  décalage et aller à l'état 10

    name   aller à l'état 36
    names  aller à l'état 37


État 27

   16 affectation: name . EQUAL value SEMICOLON
   17            | name . EQUAL operation SEMICOLON

    EQUAL  décalage et aller à l'état 38


État 28

   10 params: type name COMMA params .

    $défaut  réduction par utilisation de la règle 10 (params)


État 29

   14 declaration: CONST type . names SEMICOLON

    ALPHA  décalage et aller à l'état 10

    name   aller à l'état 39
    names  aller à l'état 40


État 30

   26 value: NUMBER .

    $défaut  réduction par utilisation de la règle 26 (value)


État 31

    8 inst: RETURN value . SEMICOLON

    SEMICOLON  décalage et aller à l'état 41


État 32

    9 inst: RETURN name . SEMICOLON

    SEMICOLON  décalage et aller à l'état 42


État 33

   18 print: PRINTF OPEN_PARENT . value CLOSE_PARENT SEMICOLON
   19      | PRINTF OPEN_PARENT . name CLOSE_PARENT SEMICOLON

    NUMBER  décalage et aller à l'état 30
    ALPHA   décalage et aller à l'état 10

    value  aller à l'état 43
    name   aller à l'état 44


État 34

    2 body: OPEN_BRACE insts CLOSE_BRACE .

    $défaut  réduction par utilisation de la règle 2 (body)


État 35

    3 insts: inst insts .

    $défaut  réduction par utilisation de la règle 3 (insts)


État 36

   15 affectation: type name . EQUAL value SEMICOLON
   33 names: name . COMMA names
   34      | name .

    EQUAL  décalage et aller à l'état 45
    COMMA  décalage et aller à l'état 46

    $défaut  réduction par utilisation de la règle 34 (names)


État 37

   13 declaration: type names . SEMICOLON

    SEMICOLON  décalage et aller à l'état 47


État 38

   16 affectation: name EQUAL . value SEMICOLON
   17            | name EQUAL . operation SEMICOLON

    NUMBER  décalage et aller à l'état 30

    operation  aller à l'état 48
    value      aller à l'état 49


État 39

   33 names: name . COMMA names
   34      | name .

    COMMA  décalage et aller à l'état 46

    $défaut  réduction par utilisation de la règle 34 (names)


État 40

   14 declaration: CONST type names . SEMICOLON

    SEMICOLON  décalage et aller à l'état 50


État 41

    8 inst: RETURN value SEMICOLON .

    $défaut  réduction par utilisation de la règle 8 (inst)


État 42

    9 inst: RETURN name SEMICOLON .

    $défaut  réduction par utilisation de la règle 9 (inst)


État 43

   18 print: PRINTF OPEN_PARENT value . CLOSE_PARENT SEMICOLON

    CLOSE_PARENT  décalage et aller à l'état 51


État 44

   19 print: PRINTF OPEN_PARENT name . CLOSE_PARENT SEMICOLON

    CLOSE_PARENT  décalage et aller à l'état 52


État 45

   15 affectation: type name EQUAL . value SEMICOLON

    NUMBER  décalage et aller à l'état 30

    value  aller à l'état 53


État 46

   33 names: name COMMA . names

    ALPHA  décalage et aller à l'état 10

    name   aller à l'état 39
    names  aller à l'état 54


État 47

   13 declaration: type names SEMICOLON .

    $défaut  réduction par utilisation de la règle 13 (declaration)


État 48

   17 affectation: name EQUAL operation . SEMICOLON
   24 operation: operation . signs operation

    PLUS       décalage et aller à l'état 55
    MINUS      décalage et aller à l'état 56
    MULTIPLY   décalage et aller à l'état 57
    DIVIDE     décalage et aller à l'état 58
    SEMICOLON  décalage et aller à l'état 59

    signs  aller à l'état 60


État 49

   16 affectation: name EQUAL value . SEMICOLON
   25 operation: value .

    SEMICOLON  décalage et aller à l'état 61

    SEMICOLON  [réduction par utilisation de la règle 25 (operation)]
    $défaut   réduction par utilisation de la règle 25 (operation)


État 50

   14 declaration: CONST type names SEMICOLON .

    $défaut  réduction par utilisation de la règle 14 (declaration)


État 51

   18 print: PRINTF OPEN_PARENT value CLOSE_PARENT . SEMICOLON

    SEMICOLON  décalage et aller à l'état 62


État 52

   19 print: PRINTF OPEN_PARENT name CLOSE_PARENT . SEMICOLON

    SEMICOLON  décalage et aller à l'état 63


État 53

   15 affectation: type name EQUAL value . SEMICOLON

    SEMICOLON  décalage et aller à l'état 64


État 54

   33 names: name COMMA names .

    $défaut  réduction par utilisation de la règle 33 (names)


État 55

   20 signs: PLUS .

    $défaut  réduction par utilisation de la règle 20 (signs)


État 56

   21 signs: MINUS .

    $défaut  réduction par utilisation de la règle 21 (signs)


État 57

   22 signs: MULTIPLY .

    $défaut  réduction par utilisation de la règle 22 (signs)


État 58

   23 signs: DIVIDE .

    $défaut  réduction par utilisation de la règle 23 (signs)


État 59

   17 affectation: name EQUAL operation SEMICOLON .

    $défaut  réduction par utilisation de la règle 17 (affectation)


État 60

   24 operation: operation signs . operation

    NUMBER  décalage et aller à l'état 30

    operation  aller à l'état 65
    value      aller à l'état 66


État 61

   16 affectation: name EQUAL value SEMICOLON .

    $défaut  réduction par utilisation de la règle 16 (affectation)


État 62

   18 print: PRINTF OPEN_PARENT value CLOSE_PARENT SEMICOLON .

    $défaut  réduction par utilisation de la règle 18 (print)


État 63

   19 print: PRINTF OPEN_PARENT name CLOSE_PARENT SEMICOLON .

    $défaut  réduction par utilisation de la règle 19 (print)


État 64

   15 affectation: type name EQUAL value SEMICOLON .

    $défaut  réduction par utilisation de la règle 15 (affectation)


État 65

   24 operation: operation . signs operation
   24          | operation signs operation .

    PLUS      décalage et aller à l'état 55
    MINUS     décalage et aller à l'état 56
    MULTIPLY  décalage et aller à l'état 57
    DIVIDE    décalage et aller à l'état 58

    PLUS      [réduction par utilisation de la règle 24 (operation)]
    MINUS     [réduction par utilisation de la règle 24 (operation)]
    MULTIPLY  [réduction par utilisation de la règle 24 (operation)]
    DIVIDE    [réduction par utilisation de la règle 24 (operation)]
    $défaut  réduction par utilisation de la règle 24 (operation)

    signs  aller à l'état 60


État 66

   25 operation: value .

    $défaut  réduction par utilisation de la règle 25 (operation)

Nonterminals useless in grammar

    args


Terminals unused in grammar

    EOL
    DOT
    OPEN_BRACKET
    CLOSE_BRACKET


Rules useless in grammar

   33 args: value COMMA args
   34     | value


State 49 conflicts: 1 shift/reduce
State 65 conflicts: 4 shift/reduce


Grammar

    0 $accept: main_structure $end

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT body

    2 params: type name COMMA params
    3       | type name

    4 body: OPEN_BRACE insts CLOSE_BRACE

    5 insts: inst insts
    6      | %empty

    7 inst: declaration
    8     | affectation
    9     | print
   10     | RETURN value SEMICOLON
   11     | RETURN name SEMICOLON

   12 declaration: type names SEMICOLON
   13            | CONST type names SEMICOLON

   14 affectation: type name EQUAL value SEMICOLON
   15            | name EQUAL value SEMICOLON
   16            | name EQUAL operation SEMICOLON

   17 print: PRINTF OPEN_PARENT value CLOSE_PARENT SEMICOLON
   18      | PRINTF OPEN_PARENT name CLOSE_PARENT SEMICOLON

   19 signs: PLUS
   20      | MINUS
   21      | MULTIPLY
   22      | DIVIDE

   23 operation: operation signs operation
   24          | value

   25 value: NUMBER

   26 type: INT

   27 name: ALPHA end_name

   28 end_name: ALPHA
   29         | NUMBER
   30         | %empty

   31 names: name COMMA names
   32      | name


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PLUS (258) 19
    MINUS (259) 20
    MULTIPLY (260) 21
    DIVIDE (261) 22
    EQUAL (262) 14 15 16
    NUMBER (263) 25 29
    ALPHA (264) 27 28
    INT (265) 26
    CONST (266) 13
    EOL (267)
    DOT (268)
    COMMA (269) 2 31
    SEMICOLON (270) 10 11 12 13 14 15 16 17 18
    OPEN_BRACE (271) 4
    CLOSE_BRACE (272) 4
    OPEN_BRACKET (273)
    CLOSE_BRACKET (274)
    OPEN_PARENT (275) 1 17 18
    CLOSE_PARENT (276) 1 17 18
    MAIN (277) 1
    RETURN (278) 10 11
    PRINTF (279) 17 18


Nonterminals, with rules where they appear

    $accept (25)
        on left: 0
    main_structure (26)
        on left: 1
        on right: 0
    params (27)
        on left: 2 3
        on right: 1 2
    body (28)
        on left: 4
        on right: 1
    insts (29)
        on left: 5 6
        on right: 4 5
    inst (30)
        on left: 7 8 9 10 11
        on right: 5
    declaration (31)
        on left: 12 13
        on right: 7
    affectation (32)
        on left: 14 15 16
        on right: 8
    print (33)
        on left: 17 18
        on right: 9
    signs (34)
        on left: 19 20 21 22
        on right: 23
    operation (35)
        on left: 23 24
        on right: 16 23
    value (36)
        on left: 25
        on right: 10 14 15 17 24
    type (37)
        on left: 26
        on right: 1 2 3 12 13 14
    name (38)
        on left: 27
        on right: 2 3 11 14 15 16 18 31 32
    end_name (39)
        on left: 28 29 30
        on right: 27
    names (40)
        on left: 31 32
        on right: 12 13 31


State 0

    0 $accept: . main_structure $end

    INT  shift, and go to state 1

    main_structure  go to state 2
    type            go to state 3


State 1

   26 type: INT .

    $default  reduce using rule 26 (type)


State 2

    0 $accept: main_structure . $end

    $end  shift, and go to state 4


State 3

    1 main_structure: type . MAIN OPEN_PARENT params CLOSE_PARENT body

    MAIN  shift, and go to state 5


State 4

    0 $accept: main_structure $end .

    $default  accept


State 5

    1 main_structure: type MAIN . OPEN_PARENT params CLOSE_PARENT body

    OPEN_PARENT  shift, and go to state 6


State 6

    1 main_structure: type MAIN OPEN_PARENT . params CLOSE_PARENT body

    INT  shift, and go to state 1

    params  go to state 7
    type    go to state 8


State 7

    1 main_structure: type MAIN OPEN_PARENT params . CLOSE_PARENT body

    CLOSE_PARENT  shift, and go to state 9


State 8

    2 params: type . name COMMA params
    3       | type . name

    ALPHA  shift, and go to state 10

    name  go to state 11


State 9

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT . body

    OPEN_BRACE  shift, and go to state 12

    body  go to state 13


State 10

   27 name: ALPHA . end_name

    NUMBER  shift, and go to state 14
    ALPHA   shift, and go to state 15

    $default  reduce using rule 30 (end_name)

    end_name  go to state 16


State 11

    2 params: type name . COMMA params
    3       | type name .

    COMMA  shift, and go to state 17

    $default  reduce using rule 3 (params)


State 12

    4 body: OPEN_BRACE . insts CLOSE_BRACE

    ALPHA   shift, and go to state 10
    INT     shift, and go to state 1
    CONST   shift, and go to state 18
    RETURN  shift, and go to state 19
    PRINTF  shift, and go to state 20

    $default  reduce using rule 6 (insts)

    insts        go to state 21
    inst         go to state 22
    declaration  go to state 23
    affectation  go to state 24
    print        go to state 25
    type         go to state 26
    name         go to state 27


State 13

    1 main_structure: type MAIN OPEN_PARENT params CLOSE_PARENT body .

    $default  reduce using rule 1 (main_structure)


State 14

   29 end_name: NUMBER .

    $default  reduce using rule 29 (end_name)


State 15

   28 end_name: ALPHA .

    $default  reduce using rule 28 (end_name)


State 16

   27 name: ALPHA end_name .

    $default  reduce using rule 27 (name)


State 17

    2 params: type name COMMA . params

    INT  shift, and go to state 1

    params  go to state 28
    type    go to state 8


State 18

   13 declaration: CONST . type names SEMICOLON

    INT  shift, and go to state 1

    type  go to state 29


State 19

   10 inst: RETURN . value SEMICOLON
   11     | RETURN . name SEMICOLON

    NUMBER  shift, and go to state 30
    ALPHA   shift, and go to state 10

    value  go to state 31
    name   go to state 32


State 20

   17 print: PRINTF . OPEN_PARENT value CLOSE_PARENT SEMICOLON
   18      | PRINTF . OPEN_PARENT name CLOSE_PARENT SEMICOLON

    OPEN_PARENT  shift, and go to state 33


State 21

    4 body: OPEN_BRACE insts . CLOSE_BRACE

    CLOSE_BRACE  shift, and go to state 34


State 22

    5 insts: inst . insts

    ALPHA   shift, and go to state 10
    INT     shift, and go to state 1
    CONST   shift, and go to state 18
    RETURN  shift, and go to state 19
    PRINTF  shift, and go to state 20

    $default  reduce using rule 6 (insts)

    insts        go to state 35
    inst         go to state 22
    declaration  go to state 23
    affectation  go to state 24
    print        go to state 25
    type         go to state 26
    name         go to state 27


State 23

    7 inst: declaration .

    $default  reduce using rule 7 (inst)


State 24

    8 inst: affectation .

    $default  reduce using rule 8 (inst)


State 25

    9 inst: print .

    $default  reduce using rule 9 (inst)


State 26

   12 declaration: type . names SEMICOLON
   14 affectation: type . name EQUAL value SEMICOLON

    ALPHA  shift, and go to state 10

    name   go to state 36
    names  go to state 37


State 27

   15 affectation: name . EQUAL value SEMICOLON
   16            | name . EQUAL operation SEMICOLON

    EQUAL  shift, and go to state 38


State 28

    2 params: type name COMMA params .

    $default  reduce using rule 2 (params)


State 29

   13 declaration: CONST type . names SEMICOLON

    ALPHA  shift, and go to state 10

    name   go to state 39
    names  go to state 40


State 30

   25 value: NUMBER .

    $default  reduce using rule 25 (value)


State 31

   10 inst: RETURN value . SEMICOLON

    SEMICOLON  shift, and go to state 41


State 32

   11 inst: RETURN name . SEMICOLON

    SEMICOLON  shift, and go to state 42


State 33

   17 print: PRINTF OPEN_PARENT . value CLOSE_PARENT SEMICOLON
   18      | PRINTF OPEN_PARENT . name CLOSE_PARENT SEMICOLON

    NUMBER  shift, and go to state 30
    ALPHA   shift, and go to state 10

    value  go to state 43
    name   go to state 44


State 34

    4 body: OPEN_BRACE insts CLOSE_BRACE .

    $default  reduce using rule 4 (body)


State 35

    5 insts: inst insts .

    $default  reduce using rule 5 (insts)


State 36

   14 affectation: type name . EQUAL value SEMICOLON
   31 names: name . COMMA names
   32      | name .

    EQUAL  shift, and go to state 45
    COMMA  shift, and go to state 46

    $default  reduce using rule 32 (names)


State 37

   12 declaration: type names . SEMICOLON

    SEMICOLON  shift, and go to state 47


State 38

   15 affectation: name EQUAL . value SEMICOLON
   16            | name EQUAL . operation SEMICOLON

    NUMBER  shift, and go to state 30

    operation  go to state 48
    value      go to state 49


State 39

   31 names: name . COMMA names
   32      | name .

    COMMA  shift, and go to state 46

    $default  reduce using rule 32 (names)


State 40

   13 declaration: CONST type names . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 41

   10 inst: RETURN value SEMICOLON .

    $default  reduce using rule 10 (inst)


State 42

   11 inst: RETURN name SEMICOLON .

    $default  reduce using rule 11 (inst)


State 43

   17 print: PRINTF OPEN_PARENT value . CLOSE_PARENT SEMICOLON

    CLOSE_PARENT  shift, and go to state 51


State 44

   18 print: PRINTF OPEN_PARENT name . CLOSE_PARENT SEMICOLON

    CLOSE_PARENT  shift, and go to state 52


State 45

   14 affectation: type name EQUAL . value SEMICOLON

    NUMBER  shift, and go to state 30

    value  go to state 53


State 46

   31 names: name COMMA . names

    ALPHA  shift, and go to state 10

    name   go to state 39
    names  go to state 54


State 47

   12 declaration: type names SEMICOLON .

    $default  reduce using rule 12 (declaration)


State 48

   16 affectation: name EQUAL operation . SEMICOLON
   23 operation: operation . signs operation

    PLUS       shift, and go to state 55
    MINUS      shift, and go to state 56
    MULTIPLY   shift, and go to state 57
    DIVIDE     shift, and go to state 58
    SEMICOLON  shift, and go to state 59

    signs  go to state 60


State 49

   15 affectation: name EQUAL value . SEMICOLON
   24 operation: value .

    SEMICOLON  shift, and go to state 61

    SEMICOLON  [reduce using rule 24 (operation)]
    $default   reduce using rule 24 (operation)


State 50

   13 declaration: CONST type names SEMICOLON .

    $default  reduce using rule 13 (declaration)


State 51

   17 print: PRINTF OPEN_PARENT value CLOSE_PARENT . SEMICOLON

    SEMICOLON  shift, and go to state 62


State 52

   18 print: PRINTF OPEN_PARENT name CLOSE_PARENT . SEMICOLON

    SEMICOLON  shift, and go to state 63


State 53

   14 affectation: type name EQUAL value . SEMICOLON

    SEMICOLON  shift, and go to state 64


State 54

   31 names: name COMMA names .

    $default  reduce using rule 31 (names)


State 55

   19 signs: PLUS .

    $default  reduce using rule 19 (signs)


State 56

   20 signs: MINUS .

    $default  reduce using rule 20 (signs)


State 57

   21 signs: MULTIPLY .

    $default  reduce using rule 21 (signs)


State 58

   22 signs: DIVIDE .

    $default  reduce using rule 22 (signs)


State 59

   16 affectation: name EQUAL operation SEMICOLON .

    $default  reduce using rule 16 (affectation)


State 60

   23 operation: operation signs . operation

    NUMBER  shift, and go to state 30

    operation  go to state 65
    value      go to state 66


State 61

   15 affectation: name EQUAL value SEMICOLON .

    $default  reduce using rule 15 (affectation)


State 62

   17 print: PRINTF OPEN_PARENT value CLOSE_PARENT SEMICOLON .

    $default  reduce using rule 17 (print)


State 63

   18 print: PRINTF OPEN_PARENT name CLOSE_PARENT SEMICOLON .

    $default  reduce using rule 18 (print)


State 64

   14 affectation: type name EQUAL value SEMICOLON .

    $default  reduce using rule 14 (affectation)


State 65

   23 operation: operation . signs operation
   23          | operation signs operation .

    PLUS      shift, and go to state 55
    MINUS     shift, and go to state 56
    MULTIPLY  shift, and go to state 57
    DIVIDE    shift, and go to state 58

    PLUS      [reduce using rule 23 (operation)]
    MINUS     [reduce using rule 23 (operation)]
    MULTIPLY  [reduce using rule 23 (operation)]
    DIVIDE    [reduce using rule 23 (operation)]
    $default  reduce using rule 23 (operation)

    signs  go to state 60


State 66

   24 operation: value .

    $default  reduce using rule 24 (operation)
